package Server;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;



public class ServerController{ // implements ClientListener, WindowListener, ActionListener 
		private ServerSocket serverSocket;
//		private ServerViewer viewer;	
//		private TrafficLog trafficLog;
//		private Timer saveLogTimer;
//  	private Message message;
//		private Messages messages;
//		private Usermessage userM; 
//		private OfflineMessages OfflineM; 

		/**
		 * 
		 * @param port The port for the server to listen on.
		 */
		public ServerController(int port) {
//			trafficLog = new TrafficLog();
//			saveLog = new Timer();
//			saveLog.schedule(new saveLog(), 30000, 30000);
			
//			viewer = new ServerViewer(this);
//			viewer.addWindowListener(this);
//			viewer.setText(trafficLog.getFormattedList());
			try {
				serverSocket = new ServerSocket(port);
				start();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}


		/**
		 * Listens for new connections and create handlers for them.
		 */
		public void start() {
			try {
				while (true) {
					Socket socket = serverSocket.accept();
					new ConnectionHandler(socket).start();
				}
			} catch (Exception e) {
			}
		}

		/**
		 * Handle messages sent to the server.
		 */
//		public void messageReceived(Message m) {
//			    m.setTimeReceived();
//				sendToList(m);
//				log(cm.getSender().getName() + ": " + tm.getText());
//			}
//		}

		/**
		 * Send a Message to every connected user
		 * @param m
		 */
//		private void sendToAll(Message m) {
//			for (Client client : userMap.values()) {
//				client.sendMessage(m);	
//			}
//		}

		/**
		 * Send the passed TextMessage to the users specified in the receivers list
		 * @param message 
		 */
//		private void sendToList(Message message) {
//			ArrayList<User> receivers = message.getReceivers();
//			if(receivers.size() <= 1){
//				sendToAll(message);
//				return;
//			}
//			for (User user : receivers) {
//				if (userMap.containsKey(user)) { //selected user is online
//					userMap.get(user).sendMessage(message);
//				
//				} else { // selected user is offline, save message 
//					OfflineMessages.get(user).add(message);
//				}
//			}
//		}

		
		/**
		 * inner class to handle threadpool 
		 */
		private class ConnectionHandler extends Thread {
			private Socket socket;

			public ConnectionHandler(Socket socket) {
				this.socket = socket;
			}

			/**
			 * Creates a new Client object and starts it's thread;
			 */
			public void run() {
				try {
					ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
					ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
//					Client client = new Client(oos, ois);
//					client.setClientListener(ServerController.this);
//					client.start();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		/**
		 * Callback from a Client.
		 */
//		public void userConnected(User user, Client client) {
//			userMap.put(user, client);
//			UserMessage message = new UserMessage(new ArrayList<User>(userMap.keySet()), user);
//			sendToAll(message);
//			if(!messages.containsKey(user)) {
//				messages.put(user, new ArrayList<TextMessage>());
//			}
//			for (User u : messages.keySet()) {
//				if (u.equals(user)) {
//					for(Message mess : messages.get(user)) {
//						userMap.get(user).sendMessage(mess);
//					}
//					messages.get(user).clear();
//				}
//			}
//			log(user.getName() + " has connected.");
//		}

		/**
		 * callback from a Client.
		 */
//		public void userDisconnected(User user) {
//			userMap.remove(user);
//			OfflineMessages message = new OfflineMessages(new ArrayList<User>(userMap.keySet()), user);
//			sendToAll(message);
//			log(user.getName() + " has disconnected.");
//		}
		
		/**
		 * Logs text to the serverlog and updates the viewer.
		 * @param text to log
		 */
//		private void log(String text) {
//			trafficLog.add(text);
//			updateViewer();
//		}
		
		/**
		 * Retrieves the dates to sort by from the viewer and updates the view.
		 */
//		private void updateViewer() {
//			if(viewer.getFromDate().length() > 0 && viewer.getToDate().length() > 0) {
//				SimpleDateFormat parser = new SimpleDateFormat("yyyy-MM-dd HH:mm");
//				try {
//					Date from = parser.parse("2018-" + viewer.getFromDate());
//					Date to = parser.parse("2018-" + viewer.getToDate());
//					viewer.setText(trafficLog.getFormattedList(from, to));
//				} catch (ParseException e) {
//					e.printStackTrace();
//				}
//			} else {
//				viewer.setText(tafficLog.getFormattedList());
//			}
//		}

//		public void windowActivated(WindowEvent e) {
//		}
//
//		public void windowClosed(WindowEvent e) {
//		}
//
//		public void windowClosing(WindowEvent e) {
//			traficLog.writeToFile();
//			viewer.dispose();
//			System.exit(0);
//		}
//
//		public void windowDeactivated(WindowEvent e) {
//		}
//
//		public void windowDeiconified(WindowEvent e) {
//		}
//
//		public void windowIconified(WindowEvent e) {
//		}
//
//		public void windowOpened(WindowEvent e) {
//		}

//		public void actionPerformed(ActionEvent arg0) {
//			updateViewer();
//		}
		
		/**
		 * A inner class timertask that saves the Trafficlog to disk 
		 *
		 */
//		private class saveLog extends TimerTask {
//			public void run() {
//				TrafficLog.writeToFile();
//			}
//		}
		
		public static void main(String[] args) {
			new ServerController(4444);
			
		}
}


